name: Build and Deploy Lambda Docker Image

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-north-1  
  IMAGE_NAME: legal-ocr-agent
  LAMBDA_FUNCTION_NAME: legal-ocr-agent

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists
        run: |
          echo "Checking if ECR repository exists..."
          if ! aws ecr describe-repositories --repository-names ${{ env.IMAGE_NAME }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "Repository doesn't exist. Creating..."
            aws ecr create-repository \
              --repository-name ${{ env.IMAGE_NAME }} \
              --region ${{ env.AWS_REGION }} \
              --image-scanning-configuration scanOnPush=true
            echo "Repository created successfully"
          else
            echo "Repository already exists"
          fi

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get ECR URI
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_URI=$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:latest
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV
          echo "ECR URI: $ECR_URI"

      - name: Build Docker image with build args
        run: |
          echo "Building Docker image with DeepSeek API key..."
          docker build \
            --build-arg DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }} \
            -t ${{ env.IMAGE_NAME }}:latest .
          echo "Docker image built successfully"

      - name: Tag Docker image for ECR
        run: |
          echo "Tagging image for ECR..."
          docker tag ${{ env.IMAGE_NAME }}:latest $ECR_URI
          echo "Image tagged successfully"

      - name: Push Docker image to ECR
        run: |
          echo "Pushing image to ECR..."
          docker push $ECR_URI
          echo "Image pushed successfully"

      - name: Create Lambda function if it doesn't exist
        run: |
          echo "Checking if Lambda function exists..."
          if ! aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} >/dev/null 2>&1; then
            echo "Function doesn't exist. Creating it..."
            ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            IMAGE_URI=$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:latest
            aws lambda create-function \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --package-type Image \
              --code ImageUri=$IMAGE_URI \
              --role arn:aws:iam::841731976034:role/lambda-legal-ocr-role \
              --timeout 900 \
              --memory-size 1024 \
              --region ${{ env.AWS_REGION }}
            echo "Function created successfully"
          else
            echo "Function already exists"
          fi
# Wait for Lambda function to be ready before updating configuration
      - name: Wait for Lambda function to be ready
        run: |
          echo "Waiting for Lambda function to be active..."
          aws lambda wait function-active --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
          echo "Lambda function is now active"
      - name: Update Lambda environment variables
        run: |
                echo "Updating Lambda environment variables..."
                aws lambda update-function-configuration \
                  --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
                  --environment Variables="{DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }},SERPAPI_KEY=${{ secrets.SERPAPI_API_KEY }}}" \
                  --timeout 900 \
                  --memory-size 1024

      - name: Deploy Lambda function with new image
        run: |
          echo "Updating Lambda function code..."
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --image-uri $ECR_URI
          echo "Lambda function updated successfully"

      - name: Wait for Lambda function to be updated
        run: |
          echo "Waiting for Lambda function update to complete..."
          aws lambda wait function-updated \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
          echo "Lambda function update completed"